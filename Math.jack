// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {

	static Array powers_of_two;

    /** Initializes the library. */
    function void init() {

	/** First 15 of powers of two defined */
	let powers_of_two = Array.new(16);
	let powers_of_two[0] = 1;
	let powers_of_two[1] = 2;
	let powers_of_two[2] = 4;
	let powers_of_two[3] = 8;
	let powers_of_two[4] = 16;
	let powers_of_two[5] = 32;
	let powers_of_two[6] = 64;
	let powers_of_two[7] = 128;
	let powers_of_two[8] = 256;
	let powers_of_two[9] = 512;
	let powers_of_two[10] = 1024;
	let powers_of_two[11] = 2048;
	let powers_of_two[12] = 4096;
	let powers_of_two[13] = 8192;
	let powers_of_two[14] = 16384;
	let powers_of_two[15] = 32767+1;

	return;
    
}
	/** Bit compare function for other functions */
	function boolean bit(int x,int j){
		return ~((x & powers_of_two[j]) = 0);
	}


    /** Returns the absolute value of x. */
    function int abs(int x) {
	if (~(x < 0)) {
		return x;
	}
	else {
		return -x;
	}
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
	var int sum;
	var int i;
	var int shifted_x;
	let sum = 0;
	let i = 0;
	let shifted_x = x;
	
	while ( i < 16) {
		/** Check if i is correct amount of x + x operations */
		if (Math.bit(y, i)) {
			/** when we have correct i, we got our answer */
			let sum = sum + shifted_x;
		}
		/** When i is not correct, we increase i by 1 and multiply shifted_x by 2 */
		let i = i + 1;
		let shifted_x = shifted_x + shifted_x;
	}
	return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
	var int count;
	var int v, s;
	
	let count = 0;
	let v = Math.abs(x);
	let s = Math.abs(y);
	
	if (y = 0) { /** Divide by zero not allowed */
		do Sys.error(3);
	}
	while(~(v < s)) { /** creates int based on times y fits to x */
		let v = v - s;
		let count = count + 1;
	} 
	
	if (x > 0 & y > 0)
	{
		return count;
	}
	else
	{
		return -count;
	}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
	var int i;
	var int v;
	if (x < 0) { /** sqrt from negative not allowed */
		do Sys.error(4);
	}
	
		let i = 1;
		let v = 0;
		while ((Math.multiply(i, i) < x)) //lasketaan 2 potensseja kunnes arvo on pienempi kuin x
		{
			let i = i + 1;
		
			if (i = 182) //jos 2 potenssi on suurempi kuin 16bit integer niin arvo = 0 ja tällöin haluttu arvo on yhden pienempi.
			{
				return i - 1;
			}
		}
		
		return i;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {

	if (a<b){
		return b;
	}
	else {
		return a;
	}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {

	if (b>a) {
		return a;
	}
	else {
		return b;
	}
    }
}




