// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

	field Array buffer;
	field int __len;
	field int __str_len;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
		if (maxLength < 0)
		{
			do Sys.error(14);
		}
		
		
		if (maxLength = 0) //can't have arrays with length of 0, they are always 1 or higher (theoretically 0-size array is NULL)
		{
			let maxLength = 1;
		}
    
		let buffer = Array.new(maxLength);
		let __len = maxLength;
		let __str_len = 0;
		
		return this;
	}

    /** De-allocates the string and frees its space. */
    method void dispose() {
		do buffer.dispose();	
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return __str_len;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		if (j > __len | j < 0)
		{
			do Sys.error(15);
		}
		
		return buffer[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		if (j > __len | j < 0)
		{
			do Sys.error(16);
		}
		
		let buffer[j] = c;
		
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		if (__str_len = __len)
		{
			do Sys.error(17);
		}
		
		if (__str_len < __len) //can't add anymore chars if the __str_len is larger than the initial string length
		{
			let buffer[__str_len] = c;
			let __str_len = __str_len + 1;
		}
		
		return this;
	}

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		if (__str_len = 0)
		{
			do Sys.error(18);
		}
		
		if (__str_len > 0) //no reason to remove anything if the string is empty
		{
			let buffer[__str_len] = ""; //last location is set to empty
			let __str_len = __str_len - 1; //decrease the size by 1
		}
		
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int v;
		var boolean s;
		var int i;
		
		let v = 0;
		let s = false;
		let i = 0;
		while (~s)
		{
			if (~buffer[i] < 48 & ~buffer[i] > 57) //Checking if the char's value in ASCII is between 48 and 57 or a number
			{
				let s = true;
				let v = v * 10 + (buffer[i] - 48); //Multiply by ten and add the value in buffer[i]
			}

			let i = i + 1;
		}
		
		return v;
	}

	method int int_size(int n)
	{
		var int v, l;
		while (v > 10)
		{
			let v = v / 10;
			let l = l + 1;
		}
		
		return l;
	}
	
    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
		var int l;
		
		if (int_size(number) > __len)
		{
			do Sys.error(19);
		}
		
		let l = number / 10;
		if (l < 10)
		{
			do appendChar(l); //Appending the number that's smaller than 10 to the object
		}
		else
		{
			do appendChar(setInt(number / 10)); //Recursive calling this function until we have a number that's smaller than 10
		}
		
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
	}

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
	}

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
