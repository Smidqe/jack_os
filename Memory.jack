// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
	
	static Array memory;
	static int length, ptr;
	
    /** Initializes memory parameters. */
    function void init() {
		let memory = 2048; //Stack size!
		
		//muistin 2 ensimmäistä lohkoa ovat aina pituus ja pointteri seuraavaan (kuten luentokalvoistakin käy ilmi)
		let length = 0;
		let ptr = 1;
		
		let memory[length] = 14334; //muistialueen koko
		let memory[ptr] = null; //pointteri seuraavaan muistilohkoon.
		return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
		var Array mem;
		
		let mem = address;
		
		return mem[0];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
		var Array mem;
		
		let mem = address;
		let mem[0] = value;
		
		return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
		var Array block, prev, nextb;
		let block = memory;
		let prev = 0;
		
		//Etsitään ensimmäinen lohko johon mahtuu. Ei valitettavasti best-fit algoritmia. Mennään hieman helpommalla algoritmilla. 
		while (block[length] < size)
		{
			let prev = block;
			let block = block[ptr];
			
			if (block = null)
			{
				do Sys.error(1);
			}
			
		}
		
		//Annetaan blokin vaatima muisti.
		/*
			block[0] = size;
			block[1] = ptr to next block(doesn't exist)
			
		
		*/
		let nextb = block + size + 2; // +2 koska block[0] sisältää koon ja block[1] seuraavaan muistilohkoon pointterin joka kuitenkin tässä ohjelmointikielessä  toimii nullina
		let nextb[length] = block[length] - size - 2; //itse vaatima tila.
		let nextb[ptr] = block[ptr];
		
		//Setting the size of the current block
		let block[length] = size;
		let block[ptr] = null;
		
		//moving the first avaiable memory location.
		if (prev = 0)
		{
			let memory = nextb;
		}
		else
		{
			let prev[ptr] = nextb;
		}
		
		return block + 2; //skip the size and next pointer
	}

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
		var Array obj;
		
		let obj = object - 2; //remember those size and ptr ints!
		let obj[ptr] = memory; //setting the pointer to the current memory pointer;
		let memory = obj; //free the memory by inserting obj back to memory
	
		return;
    }    
}
